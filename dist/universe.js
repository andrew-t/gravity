'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Universe = function () {
	function Universe(canvas) {
		var _this = this;

		_classCallCheck(this, Universe);

		this._canvas = canvas;

		this.width = 1440;
		this.height = 768;
		this.craterSize = 25;
		this.playerMargin = 100;
		this.playerRadius = 20;
		this.maxShotVelocity = 400;
		this.shotPowerUpSpeed = this.maxShotVelocity / 2000;

		this.starSystem = new StarSystem(this);
		this.players = [];
		this.particles = new Set();

		var _state = Universe.PREGAME,
		    _currentPlayer = 0;
		var self = this;
		this.gameState = {
			get currentPlayer() {
				return _currentPlayer;
			},
			set currentPlayer(val) {
				_currentPlayer = val;
				self._triggerEvent('change-player', val);
			},
			get state() {
				return _state;
			},
			set state(val) {
				_state = val;
				self._triggerEvent('state-change', val);
			},
			shot: {
				angle: Vector.zero,
				power: 0
			}
		};
		setTimeout(function () {
			self._triggerEvent('state-change', _state);
			self._triggerEvent('change-player', _currentPlayer);
		});

		this.timestream = new Timestream();
		this.timestream.maxInterval = 100;
		this.timestream.on('frame', function (interval) {
			return _this.withTransformedCanvas(function (ctx) {
				if (_this.gameState.state == Universe.POWERING) {
					_this.gameState.shot.power += _this.shotPowerUpSpeed * interval;
					if (_this.gameState.shot.power >= _this.maxShotVelocity) _this.gameState.shot.power = _this.maxShotVelocity;
					_this.updateShotAngle();
				}
				var ongoingShot = false;
				_this.drawBackground(ctx);
				if (_this.gameState.state == Universe.TARGETTING || _this.gameState.state == Universe.POWERING) {
					ctx.fillStyle = 'transparent';
					ctx.strokeStyle = '#00ff00';
					ctx.lineWidth = 2;
					new Circle(_this.currentPlayer.location, 30).draw(ctx);
					new LineSegment(_this.currentPlayer.location.plus(_this.gameState.shot.angle.times(30)), _this.currentPlayer.location.plus(_this.gameState.shot.angle.times(30 + Math.max(10, _this.gameState.shot.power / _this.maxShotVelocity * 100)))).draw(ctx);
				}
				_this.particles.forEach(function (particle) {
					if (interval == _this.maxInterval && particle.disposable) particle.destroy();
					if (particle.destroyed) {
						_this.removeParticle(particle);
						return;
					}
					var motion = particle.advance(interval / 1000, _this.starSystem);
					if (particle.checkCollisions) {
						var planetCollision = _this.starSystem.collision(motion, particle.radius);
						if (planetCollision) {
							particle.impact(planetCollision);
							if (particle.destroysPlanet) {
								planetCollision.obstacle.addCrater(planetCollision.location, _this.craterSize);
								// Bits of planet
								Explosions.single(_this, planetCollision.location, {
									velocity: Vector.zero,
									violence: 400,
									destroyOnImpact: true,
									debrisCount: 250,
									lifetime: 100000,
									debrisRadius: 3,
									globalCompositeOperation: 'source-over',
									baseColour: planetCollision.obstacle.hue + ', 75%, 45%',
									colourModel: 'hsl',
									smooth: false
								});
							}
						}
						if (particle.isBullet) {
							ongoingShot = true;
							if (particle.hasClearedShooter) _this.players.forEach(function (player) {
								var playerCollision = player.collision(motion, particle.radius);
								if (playerCollision) {
									player.explode();
									particle.impact(playerCollision);
									document.getElementById('winner').innerHTML = _this.otherPlayer(player).name;
									_this.gameState.state = Universe.GAME_OVER;
								}
							});else if (particle.location.distanceTo(particle.owner.location) > particle.radius + particle.owner.hitArea.radius) particle.hasClearedShooter = true;
						}
					}
					particle.draw(ctx);
				});
				if (!ongoingShot && _this.gameState.state == Universe.ONGOING_SHOT) {
					_this.gameState.state = Universe.TARGETTING;
					_this.gameState.shot.power = 0;
				}
			});
		});

		this.addPlayer(new Vector(this.playerMargin, this.height / 2), this.playerRadius, 'img/ship1.png').name = 'Player One';
		this.addPlayer(new Vector(this.width - this.playerMargin, this.height / 2), this.playerRadius, 'img/ship2.png').name = 'Player Two';

		this._canvasListeners = {};

		this.addCanvasListener('mousedown', function (e) {
			if (_this.gameState.state == Universe.TARGETTING) {
				_this.gameState.shot.power = 0;
				_this.updateShotAngle(e);
				_this.gameState.state = Universe.POWERING;
			}
		});

		this.addCanvasListener('mouseup', function (e) {
			if (_this.gameState.state != Universe.POWERING) return;
			_this.updateShotAngle(e);
			if (_this.gameState.shot.power >= _this.maxShotVelocity) _this.gameState.shot.power = _this.maxShotVelocity;
			_this.currentPlayer.shoot(_this.gameState.shot.angle.times(_this.gameState.shot.power));
			_this.endTurn();
		});

		this.addCanvasListener('mouseout', function (e) {
			if (_this.gameState.state == Universe.POWERING) _this.gameState.state = Universe.TARGETTING;
		});

		this.addCanvasListener('mousemove', function (e) {
			if (_this.gameState.state == Universe.POWERING || _this.gameState.state == Universe.TARGETTING) _this.updateShotAngle(e);
		});
	}

	_createClass(Universe, [{
		key: 'startGame',
		value: function startGame() {
			this.gameState.state = Universe.TARGETTING;
		}
	}, {
		key: 'updateShotAngle',
		value: function updateShotAngle(e) {
			if (e) {
				this.gameState.shot.angle = this.mouseVector(e).minus(this.currentPlayer.location).normalise();
				document.getElementById('shot-angle').innerHTML = Math.round(this.gameState.shot.angle.angle * 180 / Math.PI);
			}
			document.getElementById('shot-power').innerHTML = Math.round(this.gameState.shot.power * 100 / this.maxShotVelocity);
		}
	}, {
		key: 'addCanvasListener',
		value: function addCanvasListener(event, callback) {
			if (!this._canvasListeners[event]) this._canvasListeners[event] = [];
			this._canvasListeners[event].push(callback);
			this._canvas.addEventListener(event, callback);
		}
	}, {
		key: 'otherPlayer',
		value: function otherPlayer(player) {
			return this.players[1 - this.players.indexOf(player)];
		}
	}, {
		key: 'mouseToShot',
		value: function mouseToShot(e) {
			var mouse = this.mouseVector(e);
			var shot = mouse.minus(this.currentPlayer.location).times(this.shotVelicityMultiplier);
			if (shot.length > this.maxShotVelocity) shot = shot.normalise().times(this.maxShotVelocity);
			return shot;
		}
	}, {
		key: 'mouseVector',
		value: function mouseVector(e) {
			return Vector.canvasMouseVector(this._canvas, e).minus(new Vector(this._canvas.width / 2, this._canvas.height / 2)).over(this._lastScale || 1).plus(new Vector(this.width / 2, this.height / 2));
		}
	}, {
		key: 'addPlayer',
		value: function addPlayer(location, size, filename) {
			var player = new Player(this, location, size, filename);
			this.players.push(player);
			return player;
		}
	}, {
		key: 'addParticle',
		value: function addParticle() {
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			var p = new (Function.prototype.bind.apply(Particle, [null].concat([this], args)))();
			this.particles.add(p);
			return p;
		}
	}, {
		key: 'removeParticle',
		value: function removeParticle(particle) {
			this.particles.delete(particle);
		}
	}, {
		key: 'drawBackground',
		value: function drawBackground(ctx) {
			this.starSystem.draw(ctx);
			this.players.forEach(function (player) {
				return player.draw(ctx);
			});
		}
	}, {
		key: 'withTransformedCanvas',
		value: function withTransformedCanvas(code) {
			var canvas = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._canvas;
			var ctx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : canvas.getContext('2d');
			var clear = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

			if (clear) ctx.clearRect(-10, -10, canvas.width + 20, canvas.height + 20);
			var scale = Math.min(canvas.width / this.width, canvas.height / this.height);
			ctx.save();
			ctx.translate(canvas.width / 2, canvas.height / 2);
			ctx.scale(scale, scale);
			ctx.translate(-this.width / 2, -this.height / 2);
			if (canvas == this._canvas) {
				if (this._lastScale != scale) console.log('Viewing at ' + scale * 100 + '% scale');
				this._lastScale = scale;
			}
			code(ctx);
			ctx.restore();
		}
	}, {
		key: 'gravityAt',
		value: function gravityAt(location) {
			return this.starSystem.gravityAt(location);
		}
	}, {
		key: 'endTurn',
		value: function endTurn() {
			this.gameState.currentPlayer = 1 - this.gameState.currentPlayer;
			this.gameState.state = Universe.ONGOING_SHOT;
		}
	}, {
		key: 'destroy',
		value: function destroy() {
			var _this2 = this;

			this._cancelUpdates();

			var _loop = function _loop(event) {
				_this2._canvasListeners[event].forEach(function (listener) {
					return _this2._canvas.removeEventListener(event, listener);
				});
			};

			for (var event in this._canvasListeners) {
				_loop(event);
			}
		}
	}, {
		key: 'currentPlayer',
		get: function get() {
			return this.players[this.gameState.currentPlayer];
		}
	}]);

	return Universe;
}();

Universe.PREGAME = Symbol('Pre-game');
Universe.TARGETTING = Symbol('Targetting');
Universe.POWERING = Symbol('Powering Up');
Universe.ONGOING_SHOT = Symbol('Ongoing Shot');
Universe.GAME_OVER = Symbol('Game Over');

eventise(Universe);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
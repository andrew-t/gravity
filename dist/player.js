'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Player = function () {
	function Player(universe, location, radius, imageFilename) {
		_classCallCheck(this, Player);

		this.universe = universe;
		this.location = location;
		this.hitArea = new Circle(location, radius);
		this.destroyed = false;

		var img = new Image();
		img.addEventListener('load', this.image = img);
		img.src = imageFilename;
	}

	_createClass(Player, [{
		key: 'shoot',
		value: function shoot(initialVelocity) {
			var _this = this;

			var missile = this.universe.addParticle(this.location, initialVelocity, 5);
			missile.isBullet = true;
			missile.destroysPlanet = true;
			missile.hasClearedShooter = false;
			missile.owner = this;
			missile.on('impact', function (collision) {
				missile.destroy();
				Explosions.full(_this.universe, collision.location, missile.velocity);
			});
			this.universe.timestream.setTimeout(function () {
				if (!missile.destroyed) {
					missile.destroy();
					Explosions.full(_this.universe, missile.location, missile.velocity);
				}
			}, 5000);
		}
	}, {
		key: 'collision',
		value: function collision(lineSegment, radius) {
			// TODO: do this properly
			if (this.location.distanceTo(lineSegment.end) <= this.hitArea.radius + radius) {
				return new Collision(1, lineSegment.end, this);
			}
		}
	}, {
		key: 'explode',
		value: function explode() {
			Explosions.full(this.universe, this.location);
			this.destroyed = true;
		}
	}, {
		key: 'draw',
		value: function draw(ctx) {
			if (this.destroyed) return;
			if (this.image) {
				ctx.drawImage(this.image, 0, 0, this.image.width, this.image.height, this.location.x - this.hitArea.radius, this.location.y - this.hitArea.radius, this.hitArea.radius * 2, this.hitArea.radius * 2);
			} else {
				ctx.fillStyle = 'red';
				ctx.strokeStyle = 'white';
				ctx.lineWidth = 5;
				this.hitArea.draw(ctx);
			}
		}
	}]);

	return Player;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3BsYXllci5qcyJdLCJuYW1lcyI6WyJQbGF5ZXIiLCJ1bml2ZXJzZSIsImxvY2F0aW9uIiwicmFkaXVzIiwiaW1hZ2VGaWxlbmFtZSIsImhpdEFyZWEiLCJDaXJjbGUiLCJkZXN0cm95ZWQiLCJpbWciLCJJbWFnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbWFnZSIsInNyYyIsImluaXRpYWxWZWxvY2l0eSIsIm1pc3NpbGUiLCJhZGRQYXJ0aWNsZSIsImlzQnVsbGV0IiwiZGVzdHJveXNQbGFuZXQiLCJoYXNDbGVhcmVkU2hvb3RlciIsIm93bmVyIiwib24iLCJkZXN0cm95IiwiRXhwbG9zaW9ucyIsImZ1bGwiLCJjb2xsaXNpb24iLCJ2ZWxvY2l0eSIsInRpbWVzdHJlYW0iLCJzZXRUaW1lb3V0IiwibGluZVNlZ21lbnQiLCJkaXN0YW5jZVRvIiwiZW5kIiwiQ29sbGlzaW9uIiwiY3R4IiwiZHJhd0ltYWdlIiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsImZpbGxTdHlsZSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwiZHJhdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBQU1BLE07QUFDTCxpQkFBWUMsUUFBWixFQUFzQkMsUUFBdEIsRUFBZ0NDLE1BQWhDLEVBQXdDQyxhQUF4QyxFQUF1RDtBQUFBOztBQUN0RCxPQUFLSCxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLE9BQUtDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsT0FBS0csT0FBTCxHQUFlLElBQUlDLE1BQUosQ0FBV0osUUFBWCxFQUFxQkMsTUFBckIsQ0FBZjtBQUNBLE9BQUtJLFNBQUwsR0FBaUIsS0FBakI7O0FBRUEsTUFBTUMsTUFBTSxJQUFJQyxLQUFKLEVBQVo7QUFDQUQsTUFBSUUsZ0JBQUosQ0FBcUIsTUFBckIsRUFBNkIsS0FBS0MsS0FBTCxHQUFhSCxHQUExQztBQUNBQSxNQUFJSSxHQUFKLEdBQVVSLGFBQVY7QUFDQTs7Ozt3QkFFS1MsZSxFQUFpQjtBQUFBOztBQUN0QixPQUFNQyxVQUFVLEtBQUtiLFFBQUwsQ0FBY2MsV0FBZCxDQUNmLEtBQUtiLFFBRFUsRUFDQVcsZUFEQSxFQUNpQixDQURqQixDQUFoQjtBQUVBQyxXQUFRRSxRQUFSLEdBQW1CLElBQW5CO0FBQ0FGLFdBQVFHLGNBQVIsR0FBeUIsSUFBekI7QUFDQUgsV0FBUUksaUJBQVIsR0FBNEIsS0FBNUI7QUFDQUosV0FBUUssS0FBUixHQUFnQixJQUFoQjtBQUNBTCxXQUFRTSxFQUFSLENBQVcsUUFBWCxFQUFxQixxQkFBYTtBQUNqQ04sWUFBUU8sT0FBUjtBQUNBQyxlQUFXQyxJQUFYLENBQWdCLE1BQUt0QixRQUFyQixFQUNDdUIsVUFBVXRCLFFBRFgsRUFDcUJZLFFBQVFXLFFBRDdCO0FBRUEsSUFKRDtBQUtBLFFBQUt4QixRQUFMLENBQWN5QixVQUFkLENBQXlCQyxVQUF6QixDQUFvQyxZQUFNO0FBQ3pDLFFBQUksQ0FBQ2IsUUFBUVAsU0FBYixFQUF3QjtBQUN2Qk8sYUFBUU8sT0FBUjtBQUNBQyxnQkFBV0MsSUFBWCxDQUFnQixNQUFLdEIsUUFBckIsRUFDQ2EsUUFBUVosUUFEVCxFQUNtQlksUUFBUVcsUUFEM0I7QUFFQTtBQUNELElBTkQsRUFNRyxJQU5IO0FBT0E7Ozs0QkFFU0csVyxFQUFhekIsTSxFQUFRO0FBQzlCO0FBQ0EsT0FBSSxLQUFLRCxRQUFMLENBQWMyQixVQUFkLENBQXlCRCxZQUFZRSxHQUFyQyxLQUNGLEtBQUt6QixPQUFMLENBQWFGLE1BQWIsR0FBc0JBLE1BRHhCLEVBQ2dDO0FBQy9CLFdBQU8sSUFBSTRCLFNBQUosQ0FBYyxDQUFkLEVBQWlCSCxZQUFZRSxHQUE3QixFQUFrQyxJQUFsQyxDQUFQO0FBQ0E7QUFDRDs7OzRCQUVTO0FBQ1RSLGNBQVdDLElBQVgsQ0FBZ0IsS0FBS3RCLFFBQXJCLEVBQStCLEtBQUtDLFFBQXBDO0FBQ0EsUUFBS0ssU0FBTCxHQUFpQixJQUFqQjtBQUNBOzs7dUJBRUl5QixHLEVBQUs7QUFDVCxPQUFJLEtBQUt6QixTQUFULEVBQ0M7QUFDRCxPQUFJLEtBQUtJLEtBQVQsRUFBZ0I7QUFDZnFCLFFBQUlDLFNBQUosQ0FBYyxLQUFLdEIsS0FBbkIsRUFDQyxDQURELEVBQ0ksQ0FESixFQUNPLEtBQUtBLEtBQUwsQ0FBV3VCLEtBRGxCLEVBQ3lCLEtBQUt2QixLQUFMLENBQVd3QixNQURwQyxFQUVDLEtBQUtqQyxRQUFMLENBQWNrQyxDQUFkLEdBQWtCLEtBQUsvQixPQUFMLENBQWFGLE1BRmhDLEVBR0MsS0FBS0QsUUFBTCxDQUFjbUMsQ0FBZCxHQUFrQixLQUFLaEMsT0FBTCxDQUFhRixNQUhoQyxFQUlDLEtBQUtFLE9BQUwsQ0FBYUYsTUFBYixHQUFzQixDQUp2QixFQUtDLEtBQUtFLE9BQUwsQ0FBYUYsTUFBYixHQUFzQixDQUx2QjtBQU1BLElBUEQsTUFPTztBQUNONkIsUUFBSU0sU0FBSixHQUFnQixLQUFoQjtBQUNBTixRQUFJTyxXQUFKLEdBQWtCLE9BQWxCO0FBQ0FQLFFBQUlRLFNBQUosR0FBZ0IsQ0FBaEI7QUFDQSxTQUFLbkMsT0FBTCxDQUFhb0MsSUFBYixDQUFrQlQsR0FBbEI7QUFDQTtBQUNEIiwiZmlsZSI6InBsYXllci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFBsYXllciB7XG5cdGNvbnN0cnVjdG9yKHVuaXZlcnNlLCBsb2NhdGlvbiwgcmFkaXVzLCBpbWFnZUZpbGVuYW1lKSB7XG5cdFx0dGhpcy51bml2ZXJzZSA9IHVuaXZlcnNlO1xuXHRcdHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcblx0XHR0aGlzLmhpdEFyZWEgPSBuZXcgQ2lyY2xlKGxvY2F0aW9uLCByYWRpdXMpO1xuXHRcdHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cblx0XHRjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcblx0XHRpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuaW1hZ2UgPSBpbWcpO1xuXHRcdGltZy5zcmMgPSBpbWFnZUZpbGVuYW1lO1xuXHR9XG5cblx0c2hvb3QoaW5pdGlhbFZlbG9jaXR5KSB7XG5cdFx0Y29uc3QgbWlzc2lsZSA9IHRoaXMudW5pdmVyc2UuYWRkUGFydGljbGUoXG5cdFx0XHR0aGlzLmxvY2F0aW9uLCBpbml0aWFsVmVsb2NpdHksIDUpO1xuXHRcdG1pc3NpbGUuaXNCdWxsZXQgPSB0cnVlO1xuXHRcdG1pc3NpbGUuZGVzdHJveXNQbGFuZXQgPSB0cnVlO1xuXHRcdG1pc3NpbGUuaGFzQ2xlYXJlZFNob290ZXIgPSBmYWxzZTtcblx0XHRtaXNzaWxlLm93bmVyID0gdGhpcztcblx0XHRtaXNzaWxlLm9uKCdpbXBhY3QnLCBjb2xsaXNpb24gPT4ge1xuXHRcdFx0bWlzc2lsZS5kZXN0cm95KCk7XG5cdFx0XHRFeHBsb3Npb25zLmZ1bGwodGhpcy51bml2ZXJzZSxcblx0XHRcdFx0Y29sbGlzaW9uLmxvY2F0aW9uLCBtaXNzaWxlLnZlbG9jaXR5KTtcblx0XHR9KTtcblx0XHR0aGlzLnVuaXZlcnNlLnRpbWVzdHJlYW0uc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRpZiAoIW1pc3NpbGUuZGVzdHJveWVkKSB7XG5cdFx0XHRcdG1pc3NpbGUuZGVzdHJveSgpO1xuXHRcdFx0XHRFeHBsb3Npb25zLmZ1bGwodGhpcy51bml2ZXJzZSxcblx0XHRcdFx0XHRtaXNzaWxlLmxvY2F0aW9uLCBtaXNzaWxlLnZlbG9jaXR5KTtcblx0XHRcdH1cblx0XHR9LCA1MDAwKTtcblx0fVxuXG5cdGNvbGxpc2lvbihsaW5lU2VnbWVudCwgcmFkaXVzKSB7XG5cdFx0Ly8gVE9ETzogZG8gdGhpcyBwcm9wZXJseVxuXHRcdGlmICh0aGlzLmxvY2F0aW9uLmRpc3RhbmNlVG8obGluZVNlZ21lbnQuZW5kKSA8PVxuXHRcdFx0XHR0aGlzLmhpdEFyZWEucmFkaXVzICsgcmFkaXVzKSB7XG5cdFx0XHRyZXR1cm4gbmV3IENvbGxpc2lvbigxLCBsaW5lU2VnbWVudC5lbmQsIHRoaXMpO1xuXHRcdH1cblx0fVxuXG5cdGV4cGxvZGUoKSB7XG5cdFx0RXhwbG9zaW9ucy5mdWxsKHRoaXMudW5pdmVyc2UsIHRoaXMubG9jYXRpb24pO1xuXHRcdHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcblx0fVxuXG5cdGRyYXcoY3R4KSB7XG5cdFx0aWYgKHRoaXMuZGVzdHJveWVkKVxuXHRcdFx0cmV0dXJuO1xuXHRcdGlmICh0aGlzLmltYWdlKSB7XG5cdFx0XHRjdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsXG5cdFx0XHRcdDAsIDAsIHRoaXMuaW1hZ2Uud2lkdGgsIHRoaXMuaW1hZ2UuaGVpZ2h0LFxuXHRcdFx0XHR0aGlzLmxvY2F0aW9uLnggLSB0aGlzLmhpdEFyZWEucmFkaXVzLFxuXHRcdFx0XHR0aGlzLmxvY2F0aW9uLnkgLSB0aGlzLmhpdEFyZWEucmFkaXVzLFxuXHRcdFx0XHR0aGlzLmhpdEFyZWEucmFkaXVzICogMixcblx0XHRcdFx0dGhpcy5oaXRBcmVhLnJhZGl1cyAqIDIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gJ3JlZCc7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSAnd2hpdGUnO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDU7XG5cdFx0XHR0aGlzLmhpdEFyZWEuZHJhdyhjdHgpO1xuXHRcdH1cblx0fVxufVxuIl19